<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《Android插件化》读书笔记（一）插件化技术</title>
    <link href="/2023/02/17/%E3%80%8AAndroid%E6%8F%92%E4%BB%B6%E5%8C%96%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E6%8F%92%E4%BB%B6%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/02/17/%E3%80%8AAndroid%E6%8F%92%E4%BB%B6%E5%8C%96%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E6%8F%92%E4%BB%B6%E5%8C%96%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h1><p>Android安装应用，本身只是开辟进程，然后使用ClassLoader加载classes.dex（Java代码字节码）至进程中，执行对应的组件。同理，可以类似执行一个Apk中的代码。</p><p>插件化使Apk中的代码（Android组件）能够免安装运行，收益很大。</p><ul><li>减少安装Apk的体积，按需下载模块；</li><li>动态更新插件；</li><li>宿主和插件分开编译，提升开发效率。</li></ul><blockquote><p>拥有Native应用一样的性能，又能获取诸如Web应用一样的收益。</p></blockquote><h1 id="插件化历史"><a href="#插件化历史" class="headerlink" title="插件化历史"></a>插件化历史</h1><ul><li>静态代理，dynamic-load-apk最早使用ProxyActivity这种静态代理技术，由ProxyActivity去控制插件中PluginActivity的生命周期；that框架；</li><li>动态替换，实现原理都是上趋近于选择尽量少的Hook，并通过在manifest中预埋一些组件实现对四大组件的动态插件化；</li><li>容器化框架，VirtualApp能够完全模拟App的运行环境，能够实现App的免安装运行和双开技术。Atlas是阿里的结合组件化和热修复技术的一个App基础框架，号称是一个容器化框架。</li></ul><h1 id="组件化与插件化"><a href="#组件化与插件化" class="headerlink" title="组件化与插件化"></a>组件化与插件化</h1><p>组件化，将一个App分成多个模块，每个模块都是一个组件（module），开发过程中可以让这些组件相互依赖或独立编译、调试部分组件，但是这些组件最终会合并成一个完整的Apk发布到应用市场。</p><p>插件化，将整个App拆分成很多模块，每个模块都是一个Apk（组件化的每个模块是一个lib），最终打包的时候将宿主Apk和插件Apk分开打包，只需发布宿主Apk到应用市场，插件Apk通过动态按需下发到宿主Apk。</p><h1 id="插件化用途"><a href="#插件化用途" class="headerlink" title="插件化用途"></a>插件化用途</h1><p>修复线上bug（最多）；增加新功能（相对来说，不着急）；游戏领域；ABTest等。</p><p>设想，各个业务模块提供打包好的Apk文件，放在宿主App的assets目录下。发版后，某个模块有更新，只需重新打包这个模块的代码，生成增量包，放到服务器上供用户下载。</p><h1 id="插件化技术难点"><a href="#插件化技术难点" class="headerlink" title="插件化技术难点"></a>插件化技术难点</h1><p>插件Apk运行，找到插件Apk的存放位置，然后解析加载Apk里的代码。</p><p>执行Java代码外，Android系统四大组件需要在系统中注册，具体是在Android系统的ActivityManagerService（AMS）和PackageManagerService（PMS）中注册的。必要性在于四大组件的解析和启动都需要依赖AMS和PMS。欺骗系统，使其承认一个未安装的Apk中的组件，让宿主动态加载执行插件Apk中Android组件是插件化最大的难点。</p><blockquote><p>Q：四大组件都需要插件化技术吗？</p><p>该根据App对四大组件的依赖程度，来选择合适的插件化技术。四大组件全都实现插件化固然是好的，但是如果App中主要是Activity，那 么选择静态代理that框架就够了。</p></blockquote><p>另外，应用资源引用（特指R中引用的资源，layout、values、…）也是问题。设想，在宿主进程中使用反射加载了一个插件Apk后，代码中的R对应的id却无法引用到正确的资源。</p><p>All in all，做到插件化需要，</p><ul><li>加载并执行插件Apk中的代码（ClassLoader Injection）；</li><li>使系统能调用插件Apk中的组件（Runtime Container）；</li><li>正确识别插件Apk中的资源（Resource Injection）；资源合并、资源冲突。</li></ul><h1 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h1><p>使Android或iOS中的每个控件，在RN中都能找到相对应的控件。RN基于JavaScript编写，打包后放到服务器。</p><p>RN最大程度地实现了跨平台；JavaScript前端；快速迭代、快速上线。</p><h1 id="Google-Play"><a href="#Google-Play" class="headerlink" title="Google Play"></a>Google Play</h1><p>Google Play官方市场不允许插件化App的存在，审核会不通过。</p><blockquote><p>国外开发人员相对关注用户体验；Material Design；函数式编程；代码的优雅、实用、健壮、复用。存疑。</p></blockquote><h1 id="双开和虚拟机"><a href="#双开和虚拟机" class="headerlink" title="双开和虚拟机"></a>双开和虚拟机</h1><p>插件化的未来，虚拟机技术。在Android系统，也可以支持安装一个或多个虚拟机。</p><blockquote><p>双开，同时打开一个App的多个分身的技术。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>插件化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
