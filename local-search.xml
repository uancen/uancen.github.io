<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HJ C++ STL Note 1 STL Test</title>
    <link href="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/"/>
    <url>/2023/03/01/HJ-C++-STL-Note-1-STL-Test/</url>
    
    <content type="html"><![CDATA[<h1 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h1><blockquote><p>STL是GP最成功的作品，深入STL即是深入探索泛型编程。</p></blockquote><p>C++ Standard Library；注意命名空间，所有组件封装于std，所以常常把std命名空间全部打开，也可以部分打开。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/header.png" alt></p><p>Standard Template Library，占据C++ Standard Library约70%，分为六大组件。</p><blockquote><p>C++不同编译器、开发工具下，标准库一样。</p></blockquote><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/six.png" alt></p><p>容器帮忙解决内存的问题，其背后需要分配器支持；对容器的操作，有些操作容器本身做，更多独立为模板函数，变成Algorithms。</p><blockquote><p>数据在容器里，而操作数据的函数却在算法里，即不在其本身class中，基本思想就和OO不一致。</p></blockquote><p>算法希望处理容器的数据，迭代器作为桥梁，迭代器是泛化的指针。仿函数，作用是一个函数。Adapter帮助转换，对容器、仿函数、迭代器做转换。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/six2.png" alt></p><p>vector第二个参数可以不写，即选择默认分配器，allocator本身也是模板，分配的是int；count_if计算符合当前条件的元素有几个；头尾得到两个iterator；仿函数less用来比大小，但是需要拿每个元素和40比，使用bind2nd，即绑定第二参数；not1，则从<40变为>=40。</40变为></p><blockquote><p>容器的选择，取决于数据的分布程度和操作类型。</p></blockquote><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/range.png" alt></p><p>所有容器表示头和尾，begin指向第一个元素，end指向最后一个元素的下一个位置，因此是前闭后开空间。for loop格式如上。习惯写法。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/range2.png" alt></p><p>现在这样for range了；auto后的elem其实就是iterator；auto可以自行推导，但是不是万能的，尽量还是明晰变量类型；加上引用，可以更改原元素。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/ite.png" alt></p><p>auto可以自行推导。</p><h1 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h1><blockquote><p>Program = Data Structures + Algorithm.</p></blockquote><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/container.png" alt></p><p>容器大致分为Sequence Container、Associative Container、Unordered Containers（C++ 11新出现）；但不是好分法，Unordered Containers实际上也是Associative Container，底层是HashTable。</p><p>标准库提供的链表实际上是双向链表。</p><p>红黑树，高度平衡二分树；set、map基本都使用红黑树来做；set、map不同只在于key、key-value；multi则代表key可重复。</p><h2 id="helper"><a href="#helper" class="headerlink" title="helper"></a>helper</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">container_helper</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">container_helper</span>()&#123;&#125;;<br>    <span class="hljs-comment">// 成员函数</span><br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">get_a_target_long</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">get_a_target_string</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">compareLongs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">compareStrings</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span></span>;<br>&#125;;<br><br><span class="hljs-comment">// 从console中读入一个 long</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">container_helper::get_a_target_long</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> target = <span class="hljs-number">0</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;target (0~&quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="hljs-string">&quot;): &quot;</span>;<br>    cin &gt;&gt; target;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-comment">// 从console中读入一个 string</span><br><span class="hljs-function">string <span class="hljs-title">container_helper::get_a_target_string</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> target = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">10</span>];<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;target (0~&quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="hljs-string">&quot;): &quot;</span>;<br>    cin &gt;&gt; target;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, target);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(buf);<br>&#125;<br><br><span class="hljs-comment">// 比较 long</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">container_helper::compareLongs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-type">long</span> *)a - *(<span class="hljs-type">long</span> *)b);<br>&#125;<br><br><span class="hljs-comment">// 比较 string</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">container_helper::compareStrings</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (*(string *)a &gt; *(string *)b)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*(string *)a &lt; *(string *)b)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>C++11中将数组抽象成了一个模板类array。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 必须要告诉多大</span><br>array&lt;<span class="hljs-type">long</span>, ASIZE&gt; c;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">size</span>();<br>c.<span class="hljs-built_in">front</span>();<br>c.<span class="hljs-built_in">back</span>();<br>c.<span class="hljs-built_in">data</span>(); <span class="hljs-comment">// 返回指向数组第一个元素的指针</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 最后一个参数告诉怎么比</span><br>std::<span class="hljs-built_in">qsort</span>(c.<span class="hljs-built_in">data</span>(), ASIZE, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>), container_helper::compareLongs);<br><span class="hljs-type">long</span> *pItem = (<span class="hljs-type">long</span> *)::<span class="hljs-built_in">bsearch</span>(&amp;target, (c.<span class="hljs-built_in">data</span>()), ASIZE, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>),<br></code></pre></td></tr></table></figure><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/array_test.png" alt></p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><blockquote><p>测试程序希望在单独的空间（namespace）里。</p></blockquote><p>vector的底层是一段连续的内存空间，当容器满时进行扩容，将容器大小扩容为原来的两倍，即“两倍增长”。容易知道，capacity必定大于size。</p><p>try catch来应对内存不够的情况，尤其在元素数量是输入的情况下。</p><p>::find是一个模板函数，属于“算法”，这是全局的。</p><blockquote><p>auto来简写iterator类型；找到了，解参考取值。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;string&gt; c;<br>c.<span class="hljs-built_in">push_back</span>();<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">size</span>();<br>c.<span class="hljs-built_in">front</span>();<br>c.<span class="hljs-built_in">back</span>();<br>c.<span class="hljs-built_in">data</span>();<br>c.<span class="hljs-built_in">capacity</span>();<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br>string *pItem =<br>            (string *)::<span class="hljs-built_in">bsearch</span>(&amp;target, (c.<span class="hljs-built_in">data</span>()), c.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">sizeof</span>(string),<br>                                helper.compareStrings);<br></code></pre></td></tr></table></figure><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/vector_test.png" alt></p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>双向链表；第二个参数总是使用默认的分配器；vector的成长总是缓慢的，因为它在扩容后，还有拷贝的过程；list则是一个萝卜一个坑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">sort</span>();<br></code></pre></td></tr></table></figure><p>sort是算法的一个；但是这里没有呼叫全局sort，这里调用的是list类成员函数sort；对于该容器，容器本身实现的sort的性能一般比标准库中的算法sort更好。</p><blockquote><p>forward_list是C++11标准引入的，其前身是gcc中的slist；是单向链表。</p></blockquote><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/deque.png" alt></p><p>deque双端插入和删除；但是其底层是<strong>分段连续</strong>的，只是对于使用者来说造成了一种连续的假象。</p><blockquote><p>++进行操作符重载，来进行段间跨越。</p></blockquote><p>两端开口，如果容量不够用，则继续分配buffer，并有指针指向纪录；每次扩充多少，有关于效率问题；vector的“两倍增长”已经是权衡后的方案，但仍然会有浪费；然而总有tradeoff，空间利用率高了，时间上就会下滑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><blockquote><p>deque没有sort()，使用全局即可。</p></blockquote><h2 id="stack-amp-queue"><a href="#stack-amp-queue" class="headerlink" title="stack &amp; queue"></a>stack &amp; queue</h2><p>底层都是通过deque实现；从设计模式上说，这两种容器本质上是deque的适配器。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/sq.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// stack</span><br>c.<span class="hljs-built_in">push</span>();<br>c.<span class="hljs-built_in">pop</span>();<br>c.<span class="hljs-built_in">size</span>();<br>c.<span class="hljs-built_in">top</span>();<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// queue</span><br>c.<span class="hljs-built_in">push</span>();<br>c.<span class="hljs-built_in">pop</span>();<br>c.<span class="hljs-built_in">size</span>();<br>c.<span class="hljs-built_in">front</span>();<br>c.<span class="hljs-built_in">back</span>();<br></code></pre></td></tr></table></figure><h2 id="multiset-amp-multimap"><a href="#multiset-amp-multimap" class="headerlink" title="multiset &amp; multimap"></a>multiset &amp; multimap</h2><blockquote><p>以上介绍的都是Sequence Containers，而以下都是Associated Containers，可以理解为小型的“关联数据库”，查找非常快。</p><p>stack和queue不会提供iterator，否则会破坏其结构上的特性。</p></blockquote><p>底层是使用红黑树实现的。树本身遵守一定规则，所以只能insert。</p><blockquote><p>multiset允许重复元素，因此重复的也放入，size等同于insert的数量。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">string</span>(buf));<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target); <span class="hljs-comment">// 快很多</span><br></code></pre></td></tr></table></figure><p>对于放进去的时间复杂度没有要求，着重于查找要快，则考虑multiset &amp; multimap。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">long</span>, string&gt;(i, buf));<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<br></code></pre></td></tr></table></figure><p><strong>因为multimap支持重复的key，因此不能使用重载的<code>[]</code>运算符进行插入</strong>。</p><h2 id="unordered-multiset-amp-unordered-multimap"><a href="#unordered-multiset-amp-unordered-multimap" class="headerlink" title="unordered_multiset &amp; unordered_multimap"></a>unordered_multiset &amp; unordered_multimap</h2><p>底层使用哈希表实现。bucket一定比元素多，单bucket的链表不可以太长；当元素数量大于bucket，bucket就要扩充，而元素打散重新挂。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span>.bucket_count()<br><span class="hljs-keyword">c</span>.max_bucket_count()<br></code></pre></td></tr></table></figure><p>后面会涉及load_factor。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">c.load_factor<span class="hljs-comment">()</span><br>c.max_load_factor<span class="hljs-comment">()</span><br></code></pre></td></tr></table></figure><h2 id="set-amp-map"><a href="#set-amp-map" class="headerlink" title="set &amp; map"></a>set &amp; map</h2><p>不允许重复元素，碰到重复则不放。</p><p>值得注意的是，map允许<code>[]</code>赋值了，内部自动组装为pair。由于key没有重复，map全部放入了，1000000。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c[i] = <span class="hljs-built_in">string</span>(buf);<br></code></pre></td></tr></table></figure><h1 id="Allocator"><a href="#Allocator" class="headerlink" title="Allocator"></a>Allocator</h1><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/alloc.png" alt></p><p>gcc额外定义的分配器均位于<code>__gnu_cxx</code>命名空间下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span>    <span class="hljs-comment">// 內含 std::allocator</span></span><br><span class="hljs-comment">// 欲使用 std::allocator 以外的 allocator,得自行 #include &lt;ext\...&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __GNUC__</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\array_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\mt_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\debug_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\pool_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\bitmap_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\malloc_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\new_allocator.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>list举例使用分配器，list给出不同分配器作为参数，push_back时则自然会使分配器工作。</p><blockquote><p>分配器常常作为第二参数。</p></blockquote><p>分配器一般用于构建容器，不会直接使用。因为分配器想要直接使用也不好用，使用free关键字时不需要指定回收内存的大小，<strong>而分配器的deallocate函数需要指定回收内存大小</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *p;<br>allocator&lt;<span class="hljs-type">int</span>&gt; alloc1;<br>p = alloc1.<span class="hljs-built_in">allocate</span>(<span class="hljs-number">1</span>);<br>alloc1.<span class="hljs-built_in">deallocate</span>(p, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Course</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
