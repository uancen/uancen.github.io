<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HJ C++ STL Note 1 STL Test</title>
    <link href="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/"/>
    <url>/2023/03/01/HJ-C++-STL-Note-1-STL-Test/</url>
    
    <content type="html"><![CDATA[<h1 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h1><blockquote><p>STL是GP最成功的作品，深入STL即是深入探索泛型编程。</p></blockquote><p>C++ Standard Library；注意命名空间，所有组件封装于std，所以常常把std命名空间全部打开，也可以部分打开。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/header.png" alt></p><p>Standard Template Library，占据C++ Standard Library约70%，分为六大组件。</p><blockquote><p>C++不同编译器、开发工具下，标准库一样。</p></blockquote><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/six.png" alt></p><p>容器帮忙解决内存的问题，其背后需要分配器支持；对容器的操作，有些操作容器本身做，更多独立为模板函数，变成Algorithms。</p><blockquote><p>数据在容器里，而操作数据的函数却在算法里，即不在其本身class中，基本思想就和OO不一致。</p></blockquote><p>算法希望处理容器的数据，迭代器作为桥梁，迭代器是泛化的指针。仿函数，作用是一个函数。Adapter帮助转换，对容器、仿函数、迭代器做转换。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/six2.png" alt></p><p>vector第二个参数可以不写，即选择默认分配器，allocator本身也是模板，分配的是int；count_if计算符合当前条件的元素有几个；头尾得到两个iterator；仿函数less用来比大小，但是需要拿每个元素和40比，使用bind2nd，即绑定第二参数；not1，则从<40变为>=40。</40变为></p><blockquote><p>容器的选择，取决于数据的分布程度和操作类型。</p></blockquote><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/range.png" alt></p><p>所有容器表示头和尾，begin指向第一个元素，end指向最后一个元素的下一个位置，因此是前闭后开空间。for loop格式如上。习惯写法。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/range2.png" alt></p><p>现在这样for range了；auto后的elem其实就是iterator；auto可以自行推导，但是不是万能的，尽量还是明晰变量类型；加上引用，可以更改原元素。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/ite.png" alt></p><p>auto可以自行推导。</p><h1 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h1><blockquote><p>Program = Data Structures + Algorithm.</p></blockquote><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/container.png" alt></p><p>容器大致分为Sequence Container、Associative Container、Unordered Containers（C++ 11新出现）；但不是好分法，Unordered Containers实际上也是Associative Container，底层是HashTable。</p><p>标准库提供的链表实际上是双向链表。</p><p>红黑树，高度平衡二分树；set、map基本都使用红黑树来做；set、map不同只在于key、key-value；multi则代表key可重复。</p><h2 id="helper"><a href="#helper" class="headerlink" title="helper"></a>helper</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">container_helper</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">container_helper</span>()&#123;&#125;;<br>    <span class="hljs-comment">// 成员函数</span><br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">get_a_target_long</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">get_a_target_string</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">compareLongs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">compareStrings</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span></span>;<br>&#125;;<br><br><span class="hljs-comment">// 从console中读入一个 long</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">container_helper::get_a_target_long</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> target = <span class="hljs-number">0</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;target (0~&quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="hljs-string">&quot;): &quot;</span>;<br>    cin &gt;&gt; target;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-comment">// 从console中读入一个 string</span><br><span class="hljs-function">string <span class="hljs-title">container_helper::get_a_target_string</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> target = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">10</span>];<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;target (0~&quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="hljs-string">&quot;): &quot;</span>;<br>    cin &gt;&gt; target;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, target);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(buf);<br>&#125;<br><br><span class="hljs-comment">// 比较 long</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">container_helper::compareLongs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-type">long</span> *)a - *(<span class="hljs-type">long</span> *)b);<br>&#125;<br><br><span class="hljs-comment">// 比较 string</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">container_helper::compareStrings</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (*(string *)a &gt; *(string *)b)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*(string *)a &lt; *(string *)b)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>C++11中将数组抽象成了一个模板类array。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 必须要告诉多大</span><br>array&lt;<span class="hljs-type">long</span>, ASIZE&gt; c;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">size</span>();<br>c.<span class="hljs-built_in">front</span>();<br>c.<span class="hljs-built_in">back</span>();<br>c.<span class="hljs-built_in">data</span>(); <span class="hljs-comment">// 返回指向数组第一个元素的指针</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 最后一个参数告诉怎么比</span><br>std::<span class="hljs-built_in">qsort</span>(c.<span class="hljs-built_in">data</span>(), ASIZE, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>), container_helper::compareLongs);<br><span class="hljs-type">long</span> *pItem = (<span class="hljs-type">long</span> *)::<span class="hljs-built_in">bsearch</span>(&amp;target, (c.<span class="hljs-built_in">data</span>()), ASIZE, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>),<br></code></pre></td></tr></table></figure><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/array_test.png" alt></p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><blockquote><p>测试程序希望在单独的空间（namespace）里。</p></blockquote><p>vector的底层是一段连续的内存空间，当容器满时进行扩容，将容器大小扩容为原来的两倍，即“两倍增长”。容易知道，capacity必定大于size。</p><p>try catch来应对内存不够的情况，尤其在元素数量是输入的情况下。</p><p>::find是一个模板函数，属于“算法”，这是全局的。</p><blockquote><p>auto来简写iterator类型；找到了，解参考取值。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;string&gt; c;<br>c.<span class="hljs-built_in">push_back</span>();<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">size</span>();<br>c.<span class="hljs-built_in">front</span>();<br>c.<span class="hljs-built_in">back</span>();<br>c.<span class="hljs-built_in">data</span>();<br>c.<span class="hljs-built_in">capacity</span>();<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br>string *pItem =<br>            (string *)::<span class="hljs-built_in">bsearch</span>(&amp;target, (c.<span class="hljs-built_in">data</span>()), c.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">sizeof</span>(string),<br>                                helper.compareStrings);<br></code></pre></td></tr></table></figure><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/vector_test.png" alt></p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>双向链表；第二个参数总是使用默认的分配器；vector的成长总是缓慢的，因为它在扩容后，还有拷贝的过程；list则是一个萝卜一个坑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">sort</span>();<br></code></pre></td></tr></table></figure><p>sort是算法的一个；但是这里没有呼叫全局sort，这里调用的是list类成员函数sort；对于该容器，容器本身实现的sort的性能一般比标准库中的算法sort更好。</p><blockquote><p>forward_list是C++11标准引入的，其前身是gcc中的slist；是单向链表。</p></blockquote><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/deque.png" alt></p><p>deque双端插入和删除；但是其底层是<strong>分段连续</strong>的，只是对于使用者来说造成了一种连续的假象。</p><blockquote><p>++进行操作符重载，来进行段间跨越。</p></blockquote><p>两端开口，如果容量不够用，则继续分配buffer，并有指针指向纪录；每次扩充多少，有关于效率问题；vector的“两倍增长”已经是权衡后的方案，但仍然会有浪费；然而总有tradeoff，空间利用率高了，时间上就会下滑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><blockquote><p>deque没有sort()，使用全局即可。</p></blockquote><h2 id="stack-amp-queue"><a href="#stack-amp-queue" class="headerlink" title="stack &amp; queue"></a>stack &amp; queue</h2><p>底层都是通过deque实现；从设计模式上说，这两种容器本质上是deque的适配器。</p><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/sq.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// stack</span><br>c.<span class="hljs-built_in">push</span>();<br>c.<span class="hljs-built_in">pop</span>();<br>c.<span class="hljs-built_in">size</span>();<br>c.<span class="hljs-built_in">top</span>();<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// queue</span><br>c.<span class="hljs-built_in">push</span>();<br>c.<span class="hljs-built_in">pop</span>();<br>c.<span class="hljs-built_in">size</span>();<br>c.<span class="hljs-built_in">front</span>();<br>c.<span class="hljs-built_in">back</span>();<br></code></pre></td></tr></table></figure><h2 id="multiset-amp-multimap"><a href="#multiset-amp-multimap" class="headerlink" title="multiset &amp; multimap"></a>multiset &amp; multimap</h2><blockquote><p>以上介绍的都是Sequence Containers，而以下都是Associated Containers，可以理解为小型的“关联数据库”，查找非常快。</p><p>stack和queue不会提供iterator，否则会破坏其结构上的特性。</p></blockquote><p>底层是使用红黑树实现的。树本身遵守一定规则，所以只能insert。</p><blockquote><p>multiset允许重复元素，因此重复的也放入，size等同于insert的数量。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">string</span>(buf));<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target); <span class="hljs-comment">// 快很多</span><br></code></pre></td></tr></table></figure><p>对于放进去的时间复杂度没有要求，着重于查找要快，则考虑multiset &amp; multimap。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">long</span>, string&gt;(i, buf));<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<br></code></pre></td></tr></table></figure><p><strong>因为multimap支持重复的key，因此不能使用重载的<code>[]</code>运算符进行插入</strong>。</p><h2 id="unordered-multiset-amp-unordered-multimap"><a href="#unordered-multiset-amp-unordered-multimap" class="headerlink" title="unordered_multiset &amp; unordered_multimap"></a>unordered_multiset &amp; unordered_multimap</h2><p>底层使用哈希表实现。bucket一定比元素多，单bucket的链表不可以太长；当元素数量大于bucket，bucket就要扩充，而元素打散重新挂。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span>.bucket_count()<br><span class="hljs-keyword">c</span>.max_bucket_count()<br></code></pre></td></tr></table></figure><p>后面会涉及load_factor。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">c.load_factor<span class="hljs-comment">()</span><br>c.max_load_factor<span class="hljs-comment">()</span><br></code></pre></td></tr></table></figure><h2 id="set-amp-map"><a href="#set-amp-map" class="headerlink" title="set &amp; map"></a>set &amp; map</h2><p>不允许重复元素，碰到重复则不放。</p><p>值得注意的是，map允许<code>[]</code>赋值了，内部自动组装为pair。由于key没有重复，map全部放入了，1000000。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c[i] = <span class="hljs-built_in">string</span>(buf);<br></code></pre></td></tr></table></figure><h1 id="Allocator"><a href="#Allocator" class="headerlink" title="Allocator"></a>Allocator</h1><p><img src="/2023/03/01/HJ-C++-STL-Note-1-STL-Test/alloc.png" alt></p><p>gcc额外定义的分配器均位于<code>__gnu_cxx</code>命名空间下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span>    <span class="hljs-comment">// 內含 std::allocator</span></span><br><span class="hljs-comment">// 欲使用 std::allocator 以外的 allocator,得自行 #include &lt;ext\...&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __GNUC__</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\array_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\mt_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\debug_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\pool_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\bitmap_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\malloc_allocator.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext\new_allocator.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>list举例使用分配器，list给出不同分配器作为参数，push_back时则自然会使分配器工作。</p><blockquote><p>分配器常常作为第二参数。</p></blockquote><p>分配器一般用于构建容器，不会直接使用。因为分配器想要直接使用也不好用，使用free关键字时不需要指定回收内存的大小，<strong>而分配器的deallocate函数需要指定回收内存大小</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *p;<br>allocator&lt;<span class="hljs-type">int</span>&gt; alloc1;<br>p = alloc1.<span class="hljs-built_in">allocate</span>(<span class="hljs-number">1</span>);<br>alloc1.<span class="hljs-built_in">deallocate</span>(p, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Course</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HJ C++ OOP Note 1 Class Without Pointer Members</title>
    <link href="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/"/>
    <url>/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/</url>
    
    <content type="html"><![CDATA[<h1 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h1><h2 id="C-vs-C"><a href="#C-vs-C" class="headerlink" title="C vs. C++"></a>C vs. C++</h2><h3 id="C-vs-C-1"><a href="#C-vs-C-1" class="headerlink" title="C vs. C++"></a>C vs. C++</h3><p>C面向过程而C++面向对象。</p><blockquote><p>C++面向对象的关键：类的引入，类的封装性、继承性、多态性简化了程序编写，提到了代码重用率。</p></blockquote><p>C的目的：比汇编方便易用，同时不要损失汇编的表达能力；因此简单容易编译，灵活贴近底层。</p><p>C++的目的：提高编程人员的生产率，哪怕代价是增加编译器的复杂度；提高编程人员生产率的方法有如下几种：提高抽象层次、支持模块化编程、自动化代码生成。</p><blockquote><p>C++不仅仅是面向对象，其目的也在于支持泛型编程。</p></blockquote><h3 id="object-oriented"><a href="#object-oriented" class="headerlink" title="object oriented"></a>object oriented</h3><p>Object Based：面对的是单一的Class的设计；Object Oriented：面对的是Classes的设计，classes和classes之间的关系。</p><p>Classes的两个经典分类：Class without pointer members、Class with pointer member。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/classes.png" alt></p><blockquote><p>String数据内部只有一个指针，采用动态分配内存，该指针就指向动态分配的内存。</p></blockquote><h3 id="C-programs"><a href="#C-programs" class="headerlink" title="C++ programs"></a>C++ programs</h3><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/programs.png" alt></p><blockquote><p>延伸文件名不一定是.h或.cpp，也可能是.hpp（头文件和主程序放在一个文件中实现）。</p></blockquote><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>向左cout“丢”（&lt;&lt;）即可</p><h2 id="Header-1"><a href="#Header-1" class="headerlink" title="Header"></a>Header</h2><p>防止此头文件被重复包含。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _COMPLEX_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _COMPLEX_</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/headerlayout.png" alt></p><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>如果把私有数据的类型写死了，定义示例的时候，数据类型受到限制。所以需要写一个模板类（含模板的类）。T写成什么都可以。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">complex</span>(T r = <span class="hljs-number">0</span>, T i = <span class="hljs-number">0</span>) : <span class="hljs-built_in">re</span>(r), <span class="hljs-built_in">im</span>(i)<br>    &#123;<br>    &#125;<br>    complex &amp;<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> complex &amp;);<br>    <span class="hljs-function">T <span class="hljs-title">real</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> re; &#125;<br>    <span class="hljs-function">T <span class="hljs-title">imag</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> im; &#125;<br><br><span class="hljs-keyword">private</span>:<br>    T re, im;<br><br>    <span class="hljs-keyword">friend</span> complex &amp;__doapl(complex *, <span class="hljs-type">const</span> complex &amp;);<br>&#125;;<br><br>&#123;<br>    <span class="hljs-function">complex&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">2.5</span>, <span class="hljs-number">1.5</span>)</span></span>;<br>    <span class="hljs-function">complex&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>)</span></span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用时绑定类型。</p></blockquote><h3 id="inline-functions"><a href="#inline-functions" class="headerlink" title="inline functions"></a>inline functions</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">complex</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">complex</span>(<span class="hljs-type">double</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> i = <span class="hljs-number">0</span>) : <span class="hljs-built_in">re</span>(r), <span class="hljs-built_in">im</span>(i) &#123;&#125;<br>    complex &amp;<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> complex &amp;);<br>    complex &amp;<span class="hljs-keyword">operator</span>-=(<span class="hljs-type">const</span> complex &amp;);<br>    complex &amp;<span class="hljs-keyword">operator</span>*=(<span class="hljs-type">const</span> complex &amp;);<br>    complex &amp;<span class="hljs-keyword">operator</span>/=(<span class="hljs-type">const</span> complex &amp;);<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">real</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> re; &#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">imag</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> im; &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> re, im;<br><br>    <span class="hljs-keyword">friend</span> complex &amp;__doapl(complex *, <span class="hljs-type">const</span> complex &amp;);<br>    <span class="hljs-keyword">friend</span> complex &amp;__doami(complex *, <span class="hljs-type">const</span> complex &amp;);<br>    <span class="hljs-keyword">friend</span> complex &amp;__doaml(complex *, <span class="hljs-type">const</span> complex &amp;);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">imag</span><span class="hljs-params">(<span class="hljs-type">const</span> complex &amp;x)</span> </span>&#123; <span class="hljs-keyword">return</span> x.<span class="hljs-built_in">imag</span>(); &#125;<br></code></pre></td></tr></table></figure><p><strong>inline</strong>；快（但是最后是否inline由编译器决定）；复杂时还是需要定义在外部。</p><p>函数在class body内完成，自动称为inline候选人。</p><h3 id="access-level"><a href="#access-level" class="headerlink" title="access level"></a>access level</h3><p>数据部分一般private；如果函数是要被外界调用的就放在public，若不打算被外界调用则放在private。即分为public给外界使用、private处理内部数据。</p><blockquote><p>尽量使外界通过方法“拿”数据，而不是直接访问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// bad</span><br>cout &lt;&lt; c1.re;<br>cout &lt;&lt; c1.im;<br><span class="hljs-comment">// good</span><br>cout &lt;&lt; c1.<span class="hljs-built_in">real</span>();<br>cout &lt;&lt; c1.<span class="hljs-built_in">imag</span>();<br></code></pre></td></tr></table></figure></blockquote><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><h2 id="Ctor"><a href="#Ctor" class="headerlink" title="Ctor"></a>Ctor</h2><p>C++在利用类名创建一个对象的时候，有一个函数会被自动调用，这个函数就是构造函数。</p><p>构造函数的特点：</p><ul><li>没有返回值类型，也不需要有；</li><li>构造函数的函数名必须和类名一致；</li><li>构造函数的参数可以有默认值；</li><li>用创建实例的时候传递进来的参数值去初始化私有变量；只有构造函数才有初始列表，使用初始列表进行数据的初始化比使用赋值进行值的设定的效率更高。</li></ul><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/ctor.png" alt></p><blockquote><p>本类中没有指针变量，一般这种没有指针的类多半不需要写析构函数。</p></blockquote><h2 id="Overloading"><a href="#Overloading" class="headerlink" title="Overloading"></a>Overloading</h2><blockquote><p>构造函数可以有很多个。</p></blockquote><p>重载（overloading），创建对象可以多种构造方法。</p><blockquote><p>Q：为什么可以有同名函数？</p><p>编译器编译后的函数名称不同。</p></blockquote><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/overloading.png" alt></p><p>构造函数的重载，在使用类创建对象的时候，有多少个想法就可以创建多少个”<strong>形状不同</strong>“的构造函数，形状不同指的是函数参数个数不同。</p><p>非构造函数的重载，编译器会把它们编译成名字不同的函数。</p><h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><p>构造函数放在private区，不能被外界直接调用的；也就是无法在外界创造对象；单例模式。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/singleton1.png" alt></p><p>Singleton单键（外界只可以用一份）；构造函数位于private中；外界不可以创建，外界需要（自己在内部准备了一份），外界需要通过A的getInstance取到该单个对象。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/singleton2.png" alt></p><h2 id="Const-Member-Functions"><a href="#Const-Member-Functions" class="headerlink" title="Const Member Functions"></a>Const Member Functions</h2><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/const.png" alt></p><p>const修饰成员函数，要在如上图的位置；修饰不会改变数据内容的函数；const对象一定只能调用const方法。</p><blockquote><p>关于不会改变数据内容的函数加const的解释，上面这两个函数只是把函数的实部和虚部拿出来，并不是写，不写就不会改变私有数据，所以可以定义成常量成员函数。</p></blockquote><h3 id="const-functions"><a href="#const-functions" class="headerlink" title="const functions"></a>const functions</h3><p>所谓常量成员函数就是不改变私有数据的成员函数，表面上看的话就是函数名和作用域之间加上const修饰符的函数，加const就意味着不打算改变私有数据。</p><p>换而言之，不改变私有数据就一定要加上const；能加就加，因为不加的话可能会产生不希望的后果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>举例，这里const表示创建复数对象的时候，数据不可以被改变；但是假如调用函数real()的时候，real()函数前面没有加const，就会产生矛盾，因为没有用const修饰的函数意味着进来的数据有可能被改变。</p><h3 id="const-members"><a href="#const-members" class="headerlink" title="const members"></a>const members</h3><p>const修饰成员函数其实修饰的是隐式参数this指针，因此（由对象产生的）传入参数需要和this指针匹配，即const对象所调用的方法传入的是const对象指针，而非对象指针。也因此，const对象不可以调用非const成员函数。</p><h2 id="Argument-Passing"><a href="#Argument-Passing" class="headerlink" title="Argument Passing"></a>Argument Passing</h2><h3 id="argument-passing"><a href="#argument-passing" class="headerlink" title="argument passing"></a>argument passing</h3><blockquote><p>pass by value vs. pass by reference（to const）</p></blockquote><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/pass.png" alt></p><p>pass by value，压到函数的栈中（整包传过去），尽量不要，字节数（可能比较大）不定；pass by reference，C可以传指针，C++传reference（引用在底层就是指针）。</p><blockquote><p>引用，方法内改变则会影响原值，如果只是为了传输的速度，不希望进行改变，就用pass by reference to const。</p><p>一般来说，基础数据类型传值，自定义类型传引用。</p></blockquote><h3 id="return-value-passing"><a href="#return-value-passing" class="headerlink" title="return value passing"></a>return value passing</h3><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/returnby.png" alt></p><p>同上，考虑到效率，pass by reference。</p><h3 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h3><p>注意，不能返回局部变量的引用。</p><p>函数之间在进行参数传递和值传递的时候，都是要尽量传递引用；但是有一种情况不能传递引用，这就是值被赋给一个函数内的临时变量的时候，因为临时变量的生命周期只在函数内，不在函数外。</p><p>举例，ths本来就在，是非临时变量，所以可以传引用。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/cannot.png" alt></p><h2 id="Friend"><a href="#Friend" class="headerlink" title="Friend"></a>Friend</h2><p>声明后，可以自由取得该声明所在类的私有变量。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/friend1.png" alt></p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/friend2.png" alt></p><h1 id="Operator-Overloading"><a href="#Operator-Overloading" class="headerlink" title="Operator Overloading"></a>Operator Overloading</h1><blockquote><p>可以重载为成员函数或者是非成员函数。</p></blockquote><h2 id="Member-Functions"><a href="#Member-Functions" class="headerlink" title="Member Functions"></a>Member Functions</h2><p>在C++里面，操作符是一种函数，这是C++的一大特点。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/operator1.png" alt></p><blockquote><p>操作符重载的原因：因为函数库中没有两个复数直接相加的函数，只有实数和实数相加的函数。</p></blockquote><p>对于成员函数+=：c2调用了+=（+=作用在c2身上），c2需要写出函数来进行正确调用；c2就是this，或者说this此时就指向了c2（this是一个指针），c2的地址传入了this。</p><blockquote><p>任何函数都隐藏this参数。</p><p>_doapl：再次调用 _dopal；也许是其他地方也要使用，所以写成单独的方法。</p></blockquote><h2 id="Non-Member-Funcitions"><a href="#Non-Member-Funcitions" class="headerlink" title="Non-Member Funcitions"></a>Non-Member Funcitions</h2><blockquote><p>无隐含参数this（指针）。</p><p><strong>类外区域</strong>，主要有成员函数、全局函数。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/outclassbody.png" alt></p><blockquote><p>两个全局函数（没有class的名称），目的是取得复数的实部、虚部。</p></blockquote></blockquote><p>为了应付用户的3种可能用法，需要在类区域（class body）外写3个对应的处理加法的函数；以下123仅用作标识。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/operator2.png" alt></p><h2 id="Return-by-reference"><a href="#Return-by-reference" class="headerlink" title="Return by reference"></a>Return by reference</h2><blockquote><p>尽量return by reference。</p></blockquote><p>写一个函数一般考量两个点，这两点影响着程序执行的效率：参数传递要不要by reference；返回值传递要不要by reference。</p><p>如果return by reference，传递者无需知道接收端是以by reference还是by value的形式接受object。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/return.png" alt></p><p>返回<code>*ths</code>（也就是一个object、返回值），接收用complex&amp;接收；但是其实<code>*ths</code>处不需要管接收用什么接收。</p><blockquote><p>当然还是引用接收好，快。</p></blockquote><p>有关返回值是写void还是写一个具体类型，视具体情况定。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/returnwhat.png" alt></p><p>返回值是写void还是写一个具体类型；如果使用者只是这样调用+=这个重载函数：c2+=c1，那么返回类型complex&amp;写成void是没有问题的。</p><p>但如果这样调用：c3+=c2+=c1，返回void类型的话，就有问题了；希望c1先加到c2上，再将上述操作的返回值加到c3上。</p><h2 id="Temp-Object"><a href="#Temp-Object" class="headerlink" title="Temp Object"></a>Temp Object</h2><blockquote><p>temp object。</p></blockquote><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/temp.png" alt></p><p>这些函数绝对不可以return by reference，因为，它们返回的必定是个local object，出去就不存在了，所以一定要return by value。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// （类名后面+小括号）</span><br><span class="hljs-built_in">typename</span>();<br></code></pre></td></tr></table></figure><p>这是一个特殊语法，是创建临时对象的特殊语法。举例，函数体中的complex()就是在创建临时对象，临时对象的生命周期就是这创建的那一行，到下一行生命就结束了。</p><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/operator3.png" alt></p><blockquote><p>第一个正号操作，返回的是原来的东西，没有产生新的东西（新的local object，而下面代码中取反的操作产生了新的东西），那完全可以retrun by reference啊，这个是标准库里面的东西，那么厉害的人会注意不到这一点吗？有可能。这里其实可以retrun by reference。complex后面可以加个&amp;。（错误观点！）</p></blockquote><p>因为传入的参数是const类型的引用，如果将返回值改成引用，相当于将const类型转换为非const类型，这在编译上是通不过的。</p><h2 id="Output-Overloading"><a href="#Output-Overloading" class="headerlink" title="Output Overloading"></a>Output Overloading</h2><blockquote><p>单独拿出来，举例。</p></blockquote><p><img src="/2021/04/01/HJ-C++-OOP-Note-1-Class-Without-Pointer-Members/output.png" alt></p><blockquote><p>运算符永远是作用在左边的对象上，没有作用在右边上的。</p></blockquote><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><p>参数传递，均是pass by reference；x没有改变，const，但是os传进来需要改变，每一次输出都在改变状态，不可以const；“&lt;&lt;”是双目运算符，需要提供2个参数。</p><h3 id="return-by-reference"><a href="#return-by-reference" class="headerlink" title="return by reference"></a>return by reference</h3><p>返回值传递，return by reference；如果不是连续输出，函数的返回值类型可以设计成void，如果使用连续输出，函数的返回值类型不能是void类型；返回类型前不可以加”const”，因为连续输出的时候被丢到屏幕上的东西一直在变，即每有一个新的输出变量“os”的状态就会发生变化（也是由于这个原因，ostream&amp; os的前面不可以加const修饰符），相当于一个变量的值一直在发生变化。</p><h3 id="non-member-functions"><a href="#non-member-functions" class="headerlink" title="non-member functions"></a>non-member functions</h3><p>&lt;&lt;不可以写成成员函数，操作符重载一定左边上，正常使用习惯是&lt;&lt;作用到左边的cout身上；如果写成成员函数，<code>c1 &lt;&lt; cout;</code>，不符合使用习惯。</p><blockquote><p>任何一个操作都可以设置为成员函数或者全局函数；看情况。</p></blockquote><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>代码的5个细节</p><ul><li>构造函数中使用列表初始化为成员变量赋值；</li><li>常量成员函数使用const修饰；</li><li>参数的传递尽量考虑使用引用传递，若函数体内不改变传入的参数，应加以const修饰；</li><li>数据放入private，大部分函数放入public。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Course</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
